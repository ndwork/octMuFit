
function mu = muFitCVX( I, mask, z, z0, zR, eta )

  m = numel(I);

  dz = z(2) - z(1);
  D = makeD_1D(m, dz);

  tmp = (z-z0)/zR;
  g = 1 ./ sqrt( tmp.^2 + 1 );

  ut = triu( ones(m-1,m-1) );
  cvx_begin quiet
    %cvx_precision high

    variable gam(m)

    minimize ( ...
      0.5 * sum( ...
           ... % Integrate from z to D
           mask(1:m-1) .* ( ...
            ( 1/2 * I(1:m-1).* gam(1:m-1) ./ dz ...
             - 1/2 * I(m) * gam(m) ./ dz ...
             + 1/2 * ut * ( ...
                 I(1:m-1) ./ dz .* gam(1:m-1) .* log( g(2:m)./g(1:m-1) ) ...
               ) ...
             - ut * I(1:m-1) ...
             ).^2 ...
           ) ...
      ) ...
      + eta * sum( mask .* abs( D * gam ) ) ...    
    )

    subject to
      gam >= 0
      diag(1-mask)*gam == 0

  cvx_end

  mu = 1 ./ gam;
  mu( mask == 0 ) = 0;

end
